import pandas as pd
import os
import uuid
import re
import json
import requests
from functools import wraps
from datetime import datetime
from pymongo import MongoClient
from dateutil.parser import parse
import urllib.parse
from io import BytesIO
from langchain_experimental.agents.agent_toolkits import create_python_agent
from langchain_experimental.tools.python.tool import PythonAstREPLTool
from langchain_openai import ChatOpenAI
from langchain.tools import tool
from langgraph.prebuilt.tool_node import ToolNode
from langgraph.prebuilt import create_react_agent
from langchain_community.document_loaders import Docx2txtLoader
from langgraph.checkpoint.mongodb import MongoDBSaver
from langchain_openai import OpenAIEmbeddings
from langchain_mongodb.vectorstores import MongoDBAtlasVectorSearch
from langchain.agents.agent_types import AgentType
from langchain.prompts import ChatPromptTemplate
from langchain_core.tools import tool
from typing_extensions import TypedDict
from services.waha import Waha
from langgraph.graph import StateGraph, START, END
from langchain_core.runnables import RunnableConfig 
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode, tools_condition
from typing_extensions import Annotated,Dict, Any
from langchain.chat_models import init_chat_model
from langchain_core.messages import AIMessage, SystemMessage
from langchain_core.runnables import RunnableLambda
from repositories.wbk_assas import Webhook


OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
MONGO_USER = urllib.parse.quote_plus(os.getenv('MONGO_USER'))
MONGO_PASS = urllib.parse.quote_plus(os.getenv('MONGO_PASS'))
embedding_model = OpenAIEmbeddings(api_key=OPENAI_API_KEY, model="text-embedding-3-large")
client = MongoClient("mongodb+srv://%s:%s@cluster0.gjkin5a.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0" % (MONGO_USER, MONGO_PASS))
db = client.imobiliaria
coll_memoria = db.memoria_chat
coll_users = db.user
coll3 = db.imoveis
coll4 = db.leads
coll5 = db.corretores
coll6 = db.customers
coll7 = db.boletos
coll_vector = db.vetores
webhook_assas = Webhook()
access_token = os.getenv('ASSAS_ACCESS_TOKEN')
webhook_assas.create_webhook('imobi', access_token)
waha = Waha()

def carrega_txt(caminho):
    loader = Docx2txtLoader(caminho)
    lista_documentos = loader.load()
    documento = '\n\n'.join([doc.page_content for doc in lista_documentos])
    return documento

memory = MongoDBSaver(coll_memoria)

def check_user(state: dict, config: dict) -> dict:
    """
    Verifica se o usu√°rio (cliente ou corretor) j√° est√° cadastrado no sistema, com base no telefone.
    Adiciona os dados como 'user_info' no estado do LangGraph.
    """
    try:
        thread_id = config["metadata"]["thread_id"]
        sem_sufixo = thread_id.replace("@c.us", "")
        telefone = sem_sufixo[2:]  # remove o 55

        usuario = coll5.find_one({"telefone": telefone})

        if not usuario:
            user_info = {"role": "cliente", "nome": "N√£o informado", "telefone": telefone}
        else:
            user_info = {
                "role": usuario.get("funcao", "cliente"),
                "nome": usuario.get("nome", "N√£o informado"),
                "telefone": telefone
            }

        # Retorna o estado original com user_info adicionado
        return {
            **state,
            "user_info": user_info
        }

    except Exception as e:
        print(f"[ERRO] check_user: {e}")
        # Em caso de erro, ainda retorna o estado sem quebrar o grafo
        return {
            **state,
            "user_info": {"role": "cliente", "nome": "Erro", "telefone": "indefinido"}
        }

SYSTEM_PROMPT = """
üè† Backstory:
Voc√™ √© o **√Åtrio**, assistente digital da imobili√°ria. Seu papel √© **qualificar leads**, responder d√∫vidas sobre im√≥veis com clareza e foco na convers√£o. Atua como um corretor virtual educado e objetivo.

üìù Registro e encaminhamento:
- Se o usu√°rio demonstrar interesse em um im√≥vel, solicite os dados para utilizar a fun√ß√£o `registrar_lead`.
- Quando perceber que o cliente deseja **agendar visita** ou **falar com corretor**, chame `encaminhar_para_corretor(id_lead)`.

üè° Banco de dados:
Voc√™ pode consultar im√≥veis com os seguintes dados:
- T√≠tulo: Um breve resumo do im√≥vel
- Tipo: Casa ou apartamento
- Finalidade: aluguel ou compra
- Endere√ßo: Endere√ßo f√≠sico do im√≥vel
- Bairro: Bairro em que o im√≥vel est√° localizado
- Cidade: Cidade em que o im√≥vel est√° localizado
- Dormit√≥rios: N√∫mero de quartos
- √Årea √∫til: √Årea em m¬≤ do im√≥vel
- Valor: Valor do im√≥vel
- Condom√≠nio: Valor do condom√≠nio
- IPTU: Valor do IPTU
- Descri√ß√£o: Descri√ß√£o do im√≥vel
- Dispon√≠vel para visita√ß√£o (sim ou n√£o)

üõ†Ô∏è A√ß√µes poss√≠veis:
- Para corretores:
    - Cadastrar novos corretores e clientes, cadastrar novos im√≥veis
    - Buscar im√≥veis por tipo, bairro, valor, dormit√≥rios ou finalidade
    - Enviar resumos comerciais com os principais dados do im√≥vel
    - Mostrar as leads dispon√≠veis
    - Gerar boletos

- Para Clientes:
    - Buscar im√≥veis por tipo, bairro, valor, dormit√≥rios ou finalidade
    - Coletar prefer√™ncias e sugerir im√≥veis compat√≠veis
    - Registrar leads e encaminhar ao corretor quando apropriado
    - Enviar segunda via de boletos
    - Pesquisar cobran√ßas/boletos gerados em seu nome

üìã Caso o cliente n√£o saiba exatamente o que quer, pergunte:
- "Prefere casa ou apartamento?"
- "Tem algum bairro em mente?"
- "Qual o valor m√°ximo que pretende investir ou pagar por m√™s?"
- "Precisa de quantos dormit√≥rios ou vagas?"
- E com base nessas informa√ß√µes sugira um im√≥vel dentre os dispon√≠veis

üí¨ Comunica√ß√£o com o cliente:
- Seja educado, prestativo e direto ao ponto
- Use frases curtas, claras e amig√°veis
- N√£o pressione o cliente, ajude com sugest√µes

üö´ Regras:
- Nunca solicite dados sens√≠veis
- Nunca divulgue dados de outros clientes
- Se n√£o encontrar im√≥veis compat√≠veis, diga que o time comercial pode procurar alternativas

üìà Exemplos de perguntas:
- "Tem apartamento de 2 quartos at√© 2.000 no Centro?"
- "Quais casas est√£o dispon√≠veis na zona sul pra alugar?"
- "Qual o valor de uma cobertura na Vila Tib√©rio?"
- "Tem im√≥vel com 3 vagas e su√≠te?"

üîí Limites:
- N√£o simula financiamento, mas pode sugerir contato com especialista
- A disponibilidade final e agendamento s√£o feitos por um corretor humano

üì§ Exemplo de sauda√ß√£o inicial:
"Ol√°! üëã Sou o √Åtrio, assistente digital da nossa imobili√°ria. Me passa por favor, o que voc√™ est√° buscando! üè°‚ú®"
"""

@tool("consultar_material_de_apoio")
def consultar_material_de_apoio(pergunta: str) -> str:
    """
    Consulta o material de apoio t√©cnico enviado pelos personal trainers para responder perguntas espec√≠ficas.
    """
    vectorStore = MongoDBAtlasVectorSearch(coll_vector, embedding=embedding_model, index_name='default')
    docs = vectorStore.similarity_search(pergunta)
    if not docs:
        return "Nenhum conte√∫do relevante encontrado no material de apoio."
    
    return "\n\n".join([doc.page_content[:400] for doc in docs])

# Fun√ß√£o para gerar descri√ß√£o de im√≥vel
def extrair_descricao_imovel(imovel: dict) -> str:
    llm = ChatOpenAI(model="gpt-4o-mini", openai_api_key=OPENAI_API_KEY, temperature=0)

    prompt = ChatPromptTemplate.from_template(
        """
        Sua tarefa √© criar uma descri√ß√£o com base nas caracter√≠sticas relevantes do im√≥vel.
        Pense que deve ser algo como um COPY para marketing, impactante, cativante e que realce o potencial do im√≥vel.
        Ser√° usado para fazer divulga√ß√£o do im√≥vel e at√© oferec√™-lo para poss√≠veis inquilinos ou compradores.

        Dados do im√≥vel:
        "{imovel}"

        A resposta deve ser uma string v√°lida.
        """
    )
    
    messages = prompt.format_messages(imovel=imovel)
    resposta = llm(messages)
    return resposta.content

@tool("registra_imoveis_disponiveis")
def registra_imoveis_disponiveis(titulo: str,
                                tipo : str,
                                finalidade : str,
                                endere√ßo : str,
                                bairro : str,
                                cidade : str,
                                dormitorios : float,
                                area : float,
                                valor : float,
                                condominio: float,
                                iptu: float,
                                disponivel: bool) -> str:
    """
    Cria a entrada de im√≥veis para o banco de dados. Apenas para corretores.
    """

    try:
        imovel = {'t√≠tulo': titulo,
                'tipo': tipo,
                'finalidade': finalidade,
                'endere√ßo': endere√ßo,
                'bairro': bairro,
                'cidade': cidade,
                'dormit√≥rios': dormitorios,
                '√°rea √∫til': area,
                'valor': valor,
                'condom√≠nio': condominio,
                'iptu': iptu,
                'dispon√≠vel para visita√ß√£o': disponivel}

        imovel['descricao'] = extrair_descricao_imovel(imovel)

        coll3.insert_one(imovel)  

        return f"Im√≥vel '{titulo}' cadastrado com sucesso!"

    except Exception as e:
        return f"Erro ao cadastrar im√≥vel: {str(e)}"

@tool("cria_novo_cliente")
def cria_novo_cliente(nome: str, cpf: str, email: str, celular: str, endereco: str, numero: str, bairro: str, cep: str) -> str:
    """
    Cria um cliente na API Asaas para permitir emiss√£o de cobran√ßas.
    Necess√°rio fornecer: nome, CPF/CNPJ, email, celular, endere√ßo, n√∫mero, bairro e CEP.
    """
    url = "https://api-sandbox.asaas.com/v3/customers"

    payload = {
        "name": nome,
        "cpfCnpj": cpf,
        "email": email,
        "mobilePhone": celular,
        "address": endereco,
        "addressNumber": numero,
        "province": bairro,
        "postalCode": cep,
        "notificationDisabled": False
    }

    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "access_token": access_token
    }

    try:
        response = requests.post(url, json=payload, headers=headers)
        data = response.json()

        custumer_id = data.get("id")
        novo_cliente = {
            "nome": nome,
            "telefone": celular,
            "email": email,
            'id_asaas': custumer_id,
            "funcao" : 'cliente',
            "data_cadastro": datetime.now().isoformat()
        }

        coll6.insert_one(novo_cliente)

        if response.status_code == 200 or response.status_code == 201:
            return (
            f"‚úÖ Novo cliente cadastrado com sucesso:\n"
            f"üë§ Nome: {nome}\n"
            f"üìû Telefone: {celular}\n"
            f"üìß Email: {email}\n"
        )

        else:
            erro = data.get("errors") or data.get("message") or "Erro desconhecido"
            return f"‚ùå Falha ao cadastrar cliente: {erro}"

    except Exception as e:
        return f"Erro de exce√ß√£o ao cadastrar cliente: {str(e)}"
    
@tool("criar_boleto_asaas")
def criar_boleto_asaas(
    customer_id: str,
    valor: float,
    vencimento: str,
    descricao: str,
    dias_pos_vencimento: int,
    dias_desconto: int,
    desconto: float = 0.0,
    multa: float = 0.0,
    juros: float = 0.0,
    referencia_interna: str = None
) -> str:
    """
    Cria um boleto banc√°rio via Asaas para um cliente.

    Par√¢metros:
    - customer_id: ID do cliente no Asaas
    - valor: valor total da cobran√ßa
    - vencimento: data de vencimento no formato 'YYYY-MM-DD'
    - descricao: descri√ß√£o da cobran√ßa (opcional)
    - dias_pos_vencimento: N√∫mero de dias em que a cobran√ßa √© v√°lida ap√≥s o vencimento
    - desconto: percentual de desconto at√© o vencimento
    - dias_desconto: N√∫mero de dias antes do vencimento em que o desconto √© v√°lido
    - multa: percentual de multa ap√≥s o vencimento (ex: 2.0 para 2%)
    - juros: percentual de juros ao m√™s ap√≥s vencimento
    - referencia_interna: c√≥digo de controle interno (opcional)

    Retorna link do boleto ou erro.
    """
    try:
        url = "https://api-sandbox.asaas.com/v3/payments"

        headers = {
            "Content-Type": "application/json",
            "access_token": access_token
        }

        payload = {
            "customer": customer_id,
            "billingType": "BOLETO",
            "value": valor,
            "dueDate": vencimento,
            "description": descricao,
            "daysAfterDueDateToRegistrationCancellation": dias_pos_vencimento,
            "discount": {
                "value": desconto,
                "dueDateLimitDays": dias_desconto,
                "type": "PERCENTAGE"
            },
            "interest": { "value": juros},
            "fine": {
                "value": multa,
                "type": "PERCENTAGE"
            },
        }

        if referencia_interna:
            payload["externalReference"] = referencia_interna

        response = requests.post(url, json=payload, headers=headers)

        if response.status_code not in [200, 201]:
            return f"‚ùå Erro ao criar boleto: {response.status_code} - {response.text}"

        cobranca = response.json()
        link = cobranca.get("bankSlipUrl")

        retorno_cliente = (
            f"‚úÖ *Novo boleto gerado para voc√™!*\n"
            f"üßæ ID: {cobranca['id']}\n"
            f"üí∞ Valor: R$ {cobranca['value']:.2f}\n"
            f"üìÖ Vencimento: {cobranca['dueDate']}\n"
            f"üîó Link do boleto: {link}"
        )

        url2 = f"https://api-sandbox.asaas.com/v3/customers/{customer_id}"
        response2 = requests.get(url2, headers=headers).json()
        telefone_cliente = response2.get('mobilePhone')
        chat_id= waha.verify_wid(telefone_cliente,'imobiliaria')
        waha.send_message(chat_id, retorno_cliente, 'imobiliaria')

        
        return (
            f"‚úÖ *Boleto gerado com sucesso!*\n"
            f"üßæ ID: {cobranca['id']}\n"
            f"üí∞ Valor: R$ {cobranca['value']:.2f}\n"
            f"üìÖ Vencimento: {cobranca['dueDate']}\n"
            f"üîó Link do boleto: {link}\n"
            f"O Boleto j√° foi enviado para {response2.get('name')}"
        )

    except Exception as e:
        return f"‚ùå Erro ao criar boleto: {str(e)}"

@tool('listar_cliente_pagamento')
def listar_cliente_pagamento(nome:str):
    """
    Lista os clientes cadastrados na API de pagamentos
    """
    try:
        url = "https://api-sandbox.asaas.com/v3/customers"

        headers = {
            "Content-Type": "application/json",
            "access_token": access_token
        }

        params = {"name": nome}
        response = requests.get(url, headers=headers, params=params)

        if response.status_code != 200:
            return f"Erro ao consultar clientes: {response.status_code} - {response.text}"

        data = response.json()
        items = data.get("data", [])

        if not items:
            return f"Nenhum cliente encontrado com o nome: {nome}"

        resposta = f"üë§ Clientes encontrados com o nome *{nome}*:\n\n"
        for cliente in items[:5]:  # Limita para n√£o exagerar
            resposta += (
                f"üìå ID: {cliente.get('id', '-')}\n"
                f"üë§ Nome: {cliente.get('name', '-')}\n"
                f"üìû Telefone: {cliente.get('mobilePhone', '-')}\n"
                f"üìß Email: {cliente.get('email', '-')}\n"
                f"üî¢ CPF/CNPJ: {cliente.get('cpfCnpj', '-')}\n"
                "--------------------------\n"
            )

        return resposta.strip()

    except Exception as e:
        return f"Erro ao listar cliente: {str(e)}"
    
@tool("pesquisar_cobrancas")
def pesquisar_cobrancas(nome: str = None, status: str = None) -> str:
    """
    Pesquisa cobran√ßas no Asaas com base no ID do cliente e/ou status.
    Status pode ser: PENDING = Em aberto, RECEIVED = Paga, OVERDUE = Vencida, CONFIRMED = Confimada, etc.
    """
    try:
        url = "https://www.asaas.com/api/v3/payments"
        headers = {
            "Content-Type": "application/json",
            "access_token": access_token
        }

        params = {}
        if nome:
            params["customer"] = nome
        if status:
            params["status"] = status

        response = requests.get(url, headers=headers, params=params)

        if response.status_code != 200:
            return f"‚ùå Erro na requisi√ß√£o: {response.status_code} - {response.text}"

        dados = response.json()
        cobrancas = dados.get("data", [])

        if not cobrancas:
            return "üîé Nenhuma cobran√ßa encontrada com os filtros fornecidos."

        resultado = "üìÑ *Cobran√ßas encontradas:*\n"
        for cobranca in cobrancas[:5]:  # limite de 5 para n√£o poluir
            resultado += (
                f"\nüîπ *ID:* {cobranca['id']}\n"
                f"üë§ Cliente: {cobranca.get('customer', 'N/A')}\n"
                f"üí∞ Valor: R$ {cobranca['value']:.2f}\n"
                f"üìÖ Vencimento: {cobranca.get('dueDate', 'N/A')}\n"
                f"üìå Status: {cobranca.get('status', 'N/A')}\n"
                f"üîó Link: {cobranca.get('invoiceUrl', 'Sem link')}\n"
            )

        return resultado

    except Exception as e:
        return f"‚ùå Erro ao pesquisar cobran√ßas: {str(e)}"

@tool("consultar_imovel")
def consultar_imovel(querries: list) -> str:
    """
    üîç Consulta im√≥veis dispon√≠veis no banco de dados com base em filtros personalizados.

    Par√¢metros:
    - querries: lista de filtros para busca. Cada filtro deve ser um dict com:
        - key: nome do campo para filtrar
        - value: valor do filtro (pode ser string, n√∫mero ou booleano)

    ‚ö†Ô∏è Use os nomes dos campos exatamente como est√£o no banco (com mai√∫sculas, acentos e espa√ßos).
    """
    try:
        filtros = {}
        for querry in querries:
            chave = querry.get("key")
            valor = querry.get("value")
            if chave and valor != "":
                if isinstance(valor, str):
                    filtros[chave] = {"$regex": valor, "$options": "i"}
                else:
                    filtros[chave] = valor

        resultados = list(coll3.find(filtros, {'_id': 0}))

        if not resultados:
            return "Infelizmente, n√£o localizei nenhum im√≥vel com essas caracter√≠sticas no momento. Deseja tentar com outros filtros ou deixar seu contato para ser avisado assim que houver novidade?"

        resposta_final = "üè° *Im√≥veis encontrados com base na sua busca:*\n\n"

        for imovel in resultados[:5]:
            resposta_final += f"üîπ *{imovel.get('t√≠tulo', 'Im√≥vel')}*\n"
            resposta_final += f"{imovel.get('descricao', 'Descri√ß√£o n√£o dispon√≠vel')}\n"
            resposta_final += f"üìç Bairro: {imovel.get('bairro', 'Bairro n√£o informado')} - {imovel.get('cidade', 'Cidade n√£o informada')}\n"
            resposta_final += f"üè† Tipo: {imovel.get('tipo', 'N/A')} | Finalidade: {imovel.get('finalidade', 'N/A')}\n"
            resposta_final += f"üõèÔ∏è Dormit√≥rios: {imovel.get('dormit√≥rios', 'N/A')} | √Årea √∫til: {imovel.get('√°rea √∫til', 'N/A')} m¬≤\n"
            resposta_final += f"üí∞ Valor: R$ {imovel.get('valor', 0):,.2f} | Condom√≠nio: R$ {imovel.get('condom√≠nio', 0):,.2f} | IPTU: R$ {imovel.get('iptu', 0):,.2f}\n"
            resposta_final += f"üìÖ Dispon√≠vel para visita√ß√£o: {'Sim' if imovel.get('dispon√≠vel para visita√ß√£o') else 'N√£o'}\n"
            resposta_final += "-----------------------------------------------------\n\n"

        return resposta_final.strip()

    except Exception as e:
        return f"Erro ao consultar im√≥veis: {str(e)}"

@tool("gerar_lead_interessado")
def gerar_lead_interessado(nome: str,
                           telefone: str,
                           mensagem: str,
                           finalidade: str,
                           titulo: str,
                           bairro: str,
                           or√ßamento: float,
                           urgencia: str) -> str:
    """
    Registra um lead com classifica√ß√£o estrat√©gica baseada na finalidade, or√ßamento e urg√™ncia.
    Notifica automaticamente os corretores e retorna uma resposta adaptada ao cliente.
    N√£o gera a lead antes de obter todas essas informa√ß√µes, pois sem as informa√ß√µes completas n√£o sera poss√≠vel uma classific√£o precisa.
    """
    id_ref = str(uuid.uuid4())[:8]


    try:
        lead = {
            "nome": nome,
            "telefone": telefone,
            "mensagem_original": mensagem,
            "finalidade": finalidade.lower(),
            "imovel": titulo.lower(),
            "bairro_interesse": bairro,
            "or√ßamento_aproximado": or√ßamento,
            "urgencia": urgencia.lower(),
            "status" : "dispon√≠vel",
            "id_ref" : id_ref,
            "canal": "assistente_virtual",
            "data_criacao": datetime.now().isoformat()
        }

        # Busca im√≥vel por t√≠tulo e finalidade
        imovel = coll3.find_one({
            "T√≠tulo": {"$regex": titulo, "$options": "i"},
            "Finalidade": {"$regex": finalidade, "$options": "i"}
        })

        corretores = list(coll5.find({'funcao': 'corretor'}))
        contatos = [c['telefone'] for c in corretores]

        if imovel:
            valor_imovel = imovel["Valor"]
            relacao = or√ßamento / valor_imovel

            lead["possivel_imovel_relacionado"] = {
                "T√≠tulo": imovel["T√≠tulo"],
                "Valor": valor_imovel,
                "Bairro": imovel["Bairro"]
            }

            # CLASSIFICA√á√ÉO
            if finalidade.lower() == "compra":
                if relacao >= 0.7:
                    lead["classificacao"] = "lead quente"
                elif relacao >= 0.5 and urgencia == 'alta':
                    lead["classificacao"] = "lead quente"
                elif relacao >= 0.5:
                    lead["classificacao"] = "lead morno"
                elif urgencia == 'alta':
                    lead["classificacao"] = "lead morno"
                else:
                    lead["classificacao"] = "lead frio"

            elif finalidade.lower() in ["loca√ß√£o", "aluguel"]:
                if relacao >= 0.7 and urgencia == "alta":
                    lead["classificacao"] = "lead quente"
                elif relacao >= 0.7:
                    lead["classificacao"] = "lead morno"
                else:
                    lead["classificacao"] = "lead frio"

            else:
                lead["classificacao"] = "em an√°lise"

        else:
            lead["possivel_imovel_relacionado"] = "N√£o identificado automaticamente"
            lead["classificacao"] = "em an√°lise"

        # Salva no banco
        coll4.insert_one(lead)

        if lead["classificacao"] == "lead quente" or lead["classificacao"] == "lead morno":
        # Notifica corretores
            mensagem_corretor = f"""üì¢ *Novo Lead no Sistema*:\n
                                    üìå ID: {lead['id_ref']}\n
                                    üë§ Cliente: {lead['nome']}\n
                                    üìû Contato: {lead['telefone']}\n
                                    üè° Im√≥vel: {lead['imovel']} ({lead['finalidade']})\n
                                    üìç Bairro: {lead['bairro_interesse']}\n
                                    üí∞ Or√ßamento: R$ {lead['or√ßamento_aproximado']:,.2f}\n
                                    ‚ö° Urg√™ncia: {lead['urgencia'].capitalize()}\n
                                    üî• Classifica√ß√£o: *{lead['classificacao'].upper()}*\n
                                    """

            try:
                for contato in contatos:
                    chat_id = waha.verify_wid(contato, 'imobiliaria')
                    waha.send_message(chat_id, mensagem_corretor, 'imobiliaria')
                    print(f"Mensagem enviada para corretor: {contato}")
            except Exception as e:
                print(f"Erro ao enviar mensagem: {e}")

        # Resposta autom√°tica para o cliente
        if lead["classificacao"] == "lead quente":
            resposta_cliente = (
                "üöÄ Obrigado pelo seu interesse!\n"
                "Seu perfil foi classificado como *lead quente*, e um de nossos corretores j√° est√° sendo acionado "
                "pra falar com voc√™ ainda hoje. Fica no QAP! üí¨"
            )
        elif lead["classificacao"] == "lead morno":
            resposta_cliente = (
                "üü° Obrigado pelo interesse!\n"
                "Seu perfil est√° no radar e em breve um corretor pode entrar em contato pra entender melhor suas prefer√™ncias."
            )
        elif lead["classificacao"] == "lead frio":
            resposta_cliente = (
                "üîç Lead registrado com sucesso!\n"
                "Se surgir mais alguma info sobre or√ßamento ou urg√™ncia, posso te ajudar a encontrar algo mais certeiro!"
            )
        else:
            resposta_cliente = (
                "‚úÖ Lead registrado!\n"
                "Vamos avaliar sua solicita√ß√£o e um de nossos especialistas pode te chamar em breve. TKS pelo contato!"
            )

        return resposta_cliente

    except Exception as e:
        return f"‚ùå Erro ao registrar lead: {str(e)}"

@tool("consultar_leads_disponiveis")
def consultar_leads_disponiveis(nome: str = None,
                                 telefone: str = None,
                                 classificacao: str = None,
                                 finalidade: str = None) -> str:
    """
    Consulta leads cadastradas no banco de dados. Pode retornar:
    - Todas as leads
    - Uma lead espec√≠fica pelo nome ou telefone
    - Leads filtradas por classifica√ß√£o (quente, morno, frio) ou finalidade (compra, loca√ß√£o)
    """

    try:
        filtro = {}

        if nome:
            filtro["nome"] = {"$regex": nome, "$options": "i"}

        if telefone:
            filtro["telefone"] = {"$regex": telefone, "$options": "i"}

        if classificacao:
            filtro["classificacao"] = {"$regex": classificacao, "$options": "i"}

        if finalidade:
            filtro["finalidade"] = {"$regex": finalidade, "$options": "i"}

        resultados = list(coll4.find(filtro).sort("data_criacao", -1))

        if not resultados:
            return "Nenhuma lead encontrada com os filtros informados. Verifique os dados e tente novamente."


        resposta = ""
        for lead in resultados[:10]:  # Limita a 10 leads mais recentes por seguran√ßa
            if lead.get('status') == 'dispon√≠vel':
                resposta += (
                    f"üìã *ID - {lead.get('id_ref', 'ID n√£o informado')}*\n"
                    f"üìã *Lead - {lead.get('nome', 'Nome n√£o informado')}*\n"
                    f"üìû Telefone: {lead.get('telefone', '-')}\n"
                    f"üè∑Ô∏è Finalidade: {lead.get('finalidade', '-').capitalize()} | Im√≥vel: {lead.get('imovel', '-')}\n"
                    f"üìç Bairro: {lead.get('bairro_interesse', '-')}\n"
                    f"üí∞ Or√ßamento: R$ {lead.get('or√ßamento_aproximado', 0):,.2f}\n"
                    f"‚ö° Urg√™ncia: {lead.get('urgencia', '-').capitalize()}\n"
                    f"üî• Classifica√ß√£o: *{lead.get('classificacao', '-').upper()}*\n"
                )
                data_criacao_str = lead.get("data_criacao")
                if data_criacao_str:
                    try:
                        data_fmt = parse(data_criacao_str).strftime('%d/%m/%Y √†s %Hh%M')
                    except:
                        data_fmt = data_criacao_str
                else:
                    data_fmt = "-"
                resposta += f"üìÖ Data de cria√ß√£o: {data_fmt}\n\n"

            return resposta

    except Exception as e:
        return f"Erro ao consultar leads: {str(e)}"

@tool("assumir_lead_por_id")
def assumir_lead_por_id(id_ref: str, nome: str, telefone: str, role: str) -> str:
    """
    Corretor assume o atendimento de uma lead informando o ID de refer√™ncia.
    Atualiza status para 'em_atendimento' e registra quem assumiu.
    """
    
    try:
        lead = coll4.find_one({"id_ref": id_ref})

        if not lead:
            return f"‚ùå Nenhuma lead encontrada com o ID #{id_ref}."

        if lead.get("status") == "em_atendimento":
            return f"‚ö†Ô∏è Essa lead j√° foi assumida anteriormente."

        else:
            coll4.update_one(
                {"id_ref": id_ref},
                {"$set": {
                    "status": "em_atendimento",
                    "assumido_por": nome,
                    "telefone_corretor": telefone,
                    "data_assumido": datetime.now().isoformat()
                }}
            )

            return (
                f"‚úÖ Lead #{id_ref} assumida com sucesso por {nome}.\n"
                f"A partir de agora, essa lead est√° *em atendimento*."
            )

    except Exception as e:
        return f"Erro ao assumir lead: {str(e)}"
        
@tool("cadastrar_novo_corretor")
def cadastrar_novo_corretor(nome_novo: str,
                            telefone_novo: str,
                            role: str,
                            email_novo: str = None,
                            status: str = "ativo") -> str:
    """
    Permite que um corretor autorizado cadastre um novo corretor no sistema.
    Campos obrigat√≥rios: nome_novo, telefone_novo.
    Apenas corretores podem usar esta ferramenta.
    """

    
    try:
        # Verifica se j√° existe esse corretor
        existente = coll5.find_one({"telefone": telefone_novo})

        if existente:
            return f"‚ö†Ô∏è J√° existe um corretor com esse telefone cadastrado: {existente.get('nome')}."

        novo_corretor = {
            "nome": nome_novo,
            "telefone": telefone_novo,
            "email": email_novo,
            "funcao": "corretor",
            "status": status.lower(),
            "data_cadastro": datetime.now().isoformat()
        }

        coll5.insert_one(novo_corretor)
        thread_id = f"55{telefone_novo}@c.us"
        memory.put(thread_id, {"nome": nome_novo, "telefone": telefone_novo, "role": "corretor"})

        return (
            f"‚úÖ Novo corretor cadastrado com sucesso:\n"
            f"üë§ Nome: {nome_novo}\n"
            f"üìû Telefone: {telefone_novo}\n"
            f"üìß Email: {email_novo if email_novo else 'n√£o informado'}\n"
            f"üóÇÔ∏è Status: {status.capitalize()}"
        )

    except Exception as e:
        return f"‚ùå Erro ao cadastrar corretor: {str(e)}"    
    
@tool("enviar_segunda_via_boleto")
def enviar_segunda_via_boleto(telefone: str) -> str:
    """
    Busca o boleto mais recente para o telefone informado e retorna o link para o usu√°rio.
    Caso n√£o encontre, avisa que o boleto n√£o est√° dispon√≠vel.
    Instrua o formato que o usu√°rio deve passar o telefone. Ex: 16981394877.
    """

    try:
        customer_id = coll6.find_one({"telefone": telefone})["id_asaas"]

        url = f"https://api-sandbox.asaas.com/v3/payments?customer={customer_id}"

        headers = {
            "Content-Type": "application/json",
            "access_token": access_token
        }

        response = requests.get(url, headers=headers).json()

        retorno = (
            f"‚úÖ *2¬™ via do Boleto!*\n"
            f"üßæ ID: {response['id']}\n"
            f"üí∞ Valor: R$ {response['value']:.2f}\n"
            f"üìÖ Vencimento: {response['dueDate']}\n"
            f"üîó Link do boleto: {response['bankSlipUrl']}"
        )

        if not response:
            return "‚ùå N√£o encontrei nenhum boleto cadastrado para este telefone."

    except Exception as e:
        return f"‚ùå Erro ao buscar boleto: {str(e)}"
    
tools_node = [cadastrar_novo_corretor,
         registra_imoveis_disponiveis,
         consultar_material_de_apoio,
         consultar_imovel,
         gerar_lead_interessado,
         consultar_leads_disponiveis,
         assumir_lead_por_id,
         enviar_segunda_via_boleto,
         cria_novo_cliente,
         pesquisar_cobrancas,
         criar_boleto_asaas,
         listar_cliente_pagamento]

class State(TypedDict):
    messages: Annotated[list, add_messages]
    user_info: Dict[str, Any]
  
class AgentMobi:
    def __init__(self):
        self.memory = self._init_memory()
        self.model = self._build_agent()

    def _init_memory(self):
        # üí• Aqui usamos o m√©todo CORRETO pra sua vers√£o (sem context manager!)
        memory = MongoDBSaver(coll_memoria)
        return memory
    
    def _build_agent(self):
        graph_builder = StateGraph(State)
        #tools =tools_node
        #llm = ChatOpenAI(model="gpt-4o-mini",openai_api_key=OPENAI_API_KEY, streaming=True)
        #llm_with_tools = llm.bind_tools(tools=tools)
        
        tool_vector_search = ToolNode(tools=[consultar_material_de_apoio])

        tools_corretor = [cadastrar_novo_corretor,
         registra_imoveis_disponiveis,
         consultar_imovel,
         gerar_lead_interessado,
         consultar_leads_disponiveis,
         assumir_lead_por_id,
         cria_novo_cliente,
         criar_boleto_asaas,
         listar_cliente_pagamento]
        
        tools_cliente = [consultar_imovel,
         gerar_lead_interessado,
         enviar_segunda_via_boleto,
         pesquisar_cobrancas]
        
        tools_node_corretor = ToolNode(tools=tools_corretor)
        tools_node_cliente = ToolNode(tools=tools_cliente)

        def chatbot(state: State, config: RunnableConfig) -> State:
            try:
                user_info = state.get("user_info", {})
                nome = user_info.get("nome", "usu√°rio")
                role = user_info.get("role", "cliente")
                telefone = user_info.get("telefone", "indefinido")

                llm = ChatOpenAI(model="gpt-4o-mini",openai_api_key=OPENAI_API_KEY, streaming=True)
                if role == "corretor":
                    tools = tools_corretor
                else:
                    tools = tools_cliente

                llm_with_tools = llm.bind_tools(tools=tools)

                system_prompt = SystemMessage(content=SYSTEM_PROMPT + f"\n\nO nome do usu√°rio √© {nome}, e ele √© um {role}. Telefone {telefone}")
                
                response = llm_with_tools.invoke([system_prompt] + state["messages"])

            except Exception as e:
                print(f"[ERRO chatbot]: {e}")
                raise

            return {
                "user_info": state["user_info"],
                "messages": state["messages"] + [response]
            }

        def routing_function(state: State):
            role = state.get("user_info", {}).get("role", "").lower()
            print(f"[ROUTING FUNCTION] Direcionando com base em role='{role}'")
            if role == "corretor":
                return "corretor"
            elif role == "cliente":
                return "cliente"
            else:
                return "cliente"

        # Adiciona os estados
        graph_builder.add_node("entrada_usuario", RunnableLambda(lambda state: {"messages": state["messages"], "user_info": {}}))  # s√≥ repassa o input
        graph_builder.add_node("check_user_role", RunnableLambda(check_user))
        graph_builder.add_node("chatbot", chatbot)
        graph_builder.add_node("corretor", tools_node_corretor)
        graph_builder.add_node("cliente", tools_node_cliente)
        graph_builder.add_node("consultar_vector", tool_vector_search)

        # Corrige a ordem de fluxo: chatbot antes de tool nodes
        graph_builder.set_entry_point("entrada_usuario")
        graph_builder.add_edge("entrada_usuario", "check_user_role")
        graph_builder.add_edge("check_user_role", "chatbot")
        graph_builder.add_conditional_edges("chatbot", routing_function, {
            'corretor': 'corretor',
            'cliente': 'cliente'
        })

        # Finaliza√ß√µes
        graph_builder.add_edge("corretor", END)
        graph_builder.add_edge("cliente", END)
        graph_builder.add_edge("consultar_vector", END)

        memory = MongoDBSaver(coll_memoria)
        graph = graph_builder.compile(checkpointer=memory)
        return graph

    def memory_agent(self):
        return self.model    